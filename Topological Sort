Problem Link: https://www.codingninjas.com/studio/problems/topological-sort_8230784?challengeSlug=striver-sde-challenge&leftPanelTab=0

#include <bits/stdc++.h> 

// void dfs(int node, vector<int> adj[], int vis[], stack<int>& st) {
//     vis[node] = 1;
//     for (auto nb: adj[node]) {
//         if (!vis[nb]) dfs(nb, adj, vis, st);
//     }

//     st.push(node);
// }
vector<int> topologicalSort(vector<vector<int>> &edges, int n, int e)  {
    // stack<int> st;
    vector<int> adj[n];

  for (auto edge: edges) {
    adj[edge[0]].push_back(edge[1]);
  }

//   int vis[n] = {0};

//   for (int i=0; i<n; i++) {
//       if (!vis[i]) dfs(i, adj, vis, st);
//   }

//   vector<int> topo;
//   while (!st.empty()) {
//       int node = st.top();
//       st.pop();
//       topo.push_back(node);
//   }

//   return topo;

queue<int> q;
int indegree[n] = {0};
for (int i=0; i<n; i++) {
    for (auto adjNode: adj[i]) indegree[adjNode]++;
}

for (int i=0; i<n; i++) {
    if (indegree[i] == 0) q.push(i);
}


vector<int> topo;

while (!q.empty()) {
    int node = q.front();
    q.pop();
    topo.push_back(node);
    for (auto nb: adj[node]) {
        indegree[nb]--;
        if (indegree[nb] == 0) q.push(nb);
    }
}

return topo;




}
