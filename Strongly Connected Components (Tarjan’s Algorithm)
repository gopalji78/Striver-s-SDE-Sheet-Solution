Problem Link: https://www.codingninjas.com/studio/problems/strongly-connected-components-tarjan-s-algorithm_8230789?challengeSlug=striver-sde-challenge

#include "bits/stdc++.h"
void dfs(int node, vector<int> &vis, vector<int> adj[], stack<int>& st) {
    vis[node] = 1;
    for (auto it: adj[node]) {
        if (!vis[it]) {
            dfs(it, vis, adj, st);
        }
    }
    st.push(node);
}

void dfsN(int node, vector<int> &vis, vector<int> adj[], vector<int> &component) {
    component.push_back(node);
    vis[node] = 1;

    for (auto it: adj[node]){
        if (!vis[it]) {
            dfsN(it, vis, adj, component);
        }
    }
}

vector<vector<int>> stronglyConnectedComponents(int n, vector<vector<int>> &edges)
{
    vector<int> adj[n];
    for (auto it: edges) {
        int u = it[0];
        int v = it[1];
        adj[u].push_back(v);
    }

    for (int i=0; i<n; i++) {
        sort(adj[i].begin(), adj[i].end());
    }

    vector<int> vis(n, 0);
    stack<int> st;
    for (int i=0; i<n; i++) {
        if (!vis[i]) {
            dfs(i, vis, adj, st);
        }
    }

    vector<int> adjT[n];
    for (int i=0; i<n; i++) {
        vis[i] = 0;
        for (auto it: adj[i]) {
            adjT[it].push_back(i);
        }
    }
    vector<vector<int>> scc;
    while (!st.empty()) {
        int node = st.top();
        st.pop();
        if (!vis[node]) {
            vector<int> component;
            dfsN(node, vis, adjT, component);
            scc.push_back(component);
        }
        
    }
    return scc;


    
}
