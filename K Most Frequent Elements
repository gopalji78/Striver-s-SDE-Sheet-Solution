Problem Link: https://www.codingninjas.com/codestudio/problems/k-most-frequent-elements_8230853?challengeSlug=striver-sde-challenge&leftPanelTab=0

#include <bits/stdc++.h> 
// bool comp(pair<int, int> p1, pair<int, int> p2) {
//     return p1.first>=p2.first ? true: false;
// }

vector<int> KMostFrequent(int n, int k, vector<int> &arr)
{
    // sort(arr.begin(), arr.end());
    // vector<pair<int, int>> freq;
    // int cnt = 1;
    // int ele = arr[0];
    // for (int i=1; i<n; i++) {
    //     if (ele == arr[i]) cnt++;
    //     else {
    //         freq.push_back({cnt, ele});
    //         ele = arr[i];
    //         cnt = 1;
    //     }
    // }
    // freq.push_back({cnt, ele});

    // sort(freq.begin(), freq.end(), comp);

    // vector<int> ans;
    // for (int i=0; i<k; i++){
    //     ans.push_back(freq[i].second);
    // }
    // sort(ans.begin(), ans.end());
    // return ans;

    unordered_map<int, int> freq;
    for (int i=0; i<n; i++) 
        freq[arr[i]]++;
    

    priority_queue<pair<int, int>> pq;

    for (auto it: freq)
        pq.push({it.second, it.first});



    vector<int> ans;
    for (int i=0; i<k; i++) {
        ans.push_back(pq.top().second);
        pq.pop();
    }
    sort(ans.begin(), ans.end());
    return ans;
}
