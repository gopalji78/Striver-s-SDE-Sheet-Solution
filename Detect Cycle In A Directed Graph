Problem Link: https://www.codingninjas.com/studio/problems/detect-cycle-in-a-directed-graph_8230794?challengeSlug=striver-sde-challenge&leftPanelTab=0

#include "bits/stdc++.h"
// bool dfs(int node, int vis[], vector<int> adj[]) {
//   vis[node] = 2;

//   for (auto neighbour: adj[node]) {
//     if (vis[neighbour] == 0) {
//       if (dfs(neighbour, vis, adj) == true) return true;
//     }
//     else if (vis[neighbour] == 2) return true;
//   }

//   vis[node] = 1;
//   return false;
// }

int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
  vector<int> adj[n+1];

  for (auto edge: edges) {
    adj[edge.first].push_back(edge.second);
  }

  // int vis[n+1] = {0};

  // for (int i=1; i<=n; i++) {
  //   if (vis[i] == 0) {
  //     if (dfs(i, vis, adj) == true) return 1;
  //   }
  // }

  // return 0;

  int indegree[n+1];
  for (int i=0; i<=n; i++) indegree[i] = 0;

  for (auto edge : edges) {
    indegree[edge.second]++;
  }

  queue<int> q;
  for (int i = 1; i <= n; i++) {
    if (indegree[i] == 0) q.push(i);
  }

  int cnt = 0;
  while (!q.empty()) {
    int node = q.front();
    cnt++;
    q.pop();

    for (auto nb: adj[node]) {
      indegree[nb]--;
      if (indegree[nb] == 0) q.push(nb);
    }
  }

  if (cnt == n) return false;
  return true;


}
