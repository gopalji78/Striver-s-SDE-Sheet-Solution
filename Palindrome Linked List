Problem Link: https://www.codingninjas.com/codestudio/problems/palindrome-linked-list_8230717?challengeSlug=striver-sde-challenge&leftPanelTab=0

#include <bits/stdc++.h> 
/****************************************************************

    Following is the class structure of the LinkedListNode class:

    template <typename T>
    class LinkedListNode
    {
    public:
        T data;
        LinkedListNode<T> *next;
        LinkedListNode(T data)
        {
            this->data = data;
            this->next = NULL;
        }
    };

*****************************************************************/
LinkedListNode<int>* reverse(LinkedListNode<int>* &head){
    LinkedListNode<int>* prev = NULL;
    LinkedListNode<int>* cur = head;
    LinkedListNode<int>* nxt;

    while (cur != NULL) {
        nxt = cur->next;
        cur->next = prev;
        prev = cur;
        cur = nxt;
    }
    return prev;
}


bool isPalindrome(LinkedListNode<int> *head) {
    LinkedListNode<int>*  fast = head;
    LinkedListNode<int>* slow = head;

    if (head == NULL || head->next == NULL) return true;

    // while (fast != NULL && fast->next != NULL) {
    //     fast = fast->next->next;
    //     slow = slow->next;
    // }
    
    // LinkedListNode<int>* temp = slow;
    // LinkedListNode<int>* prev = NULL;
    // while (temp != NULL) {
    //     LinkedListNode<int>* nxt = temp->next;
    //     temp->next = prev;
    //     prev = temp;
    //     temp = nxt;
    // }

    // while (head != slow) {
    //     if (prev->data != head->data) return false;
    //     prev = prev->next;
    //     head = head->next;
    // }

    // return true;

    while (fast->next && fast->next->next){
        fast = fast->next->next;
        slow = slow->next;
    }

    LinkedListNode<int>* mid = slow;
    mid->next = reverse(mid->next);
    LinkedListNode<int>* temp = mid->next;
    fast = head;

    while (temp != NULL){
        if (temp->data != fast->data) return false;
        fast = fast->next;
        temp = temp->next;
    }

    mid->next = reverse(mid->next);

    return true;





}
