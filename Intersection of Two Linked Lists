Problem Link: https://www.codingninjas.com/codestudio/problems/intersection-of-two-linked-lists_8230688?challengeSlug=striver-sde-challenge&leftPanelTab=0

#include <bits/stdc++.h>
/****************************************************************

    Following is the class structure of the Node class:

        class Node
        {
        public:
            int data;
            Node *next;
            Node()
            {
                this->data = 0;
                next = NULL;
            }
            Node(int data)
            {
                this->data = data;
                this->next = NULL;
            }
            Node(int data, Node* next)
            {
                this->data = data;
                this->next = next;
            }
        };

*****************************************************************/

Node* findIntersection(Node *firstHead, Node *secondHead)
{
    stack<Node*> s1;
    stack<Node*> s2;

    Node* temp = firstHead;
    while (temp != NULL){
        s1.push(temp);
        temp = temp->next;
    }

    
    Node* temp2 = secondHead;
    while (temp2 != NULL){
        s2.push(temp2);
        temp2 = temp2->next;
    }

    Node* cmn = NULL;
    while (!s1.empty() && !s2.empty()){
        if (s1.top() != s2.top()) break;
        cmn = s1.top();
        s1.pop();
        s2.pop();
    }
    return cmn;
        // int len1 = 0;
        // int len2 = 0;

        // Node* t1 = firstHead, *t2 = secondHead;
        // while (t1){
        //     t1 = t1->next;
        //     len1++;
        // }
        // while (t2){
        //     t2 = t2->next;
        //     len2++;
        // }


        // t1 = firstHead;
        // t2 = secondHead;
        // if (len1 < len2){
        //     for (int i=0; i<len2-len1; i++) t2 = t2->next;
        // }else{
        //     for (int i=0; i<len1-len2; i++) t1 = t1->next;
        // }

        // while (t1) {
        //     if (t1 == t2) return t1;
        //     t1 = t1->next;
        //     t2 = t2->next;
        // }

        // return NULL;
}
